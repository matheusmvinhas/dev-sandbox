.PHONY: clean-spark-events clean-output clean-all

COMPOSE_FILES = \
	-f orchestration/docker-compose.airflow.yml \
	-f orchestration/docker-compose.clickhouse.yml \
	-f orchestration/docker-compose.metabase.yml \
	-f orchestration/docker-compose.spark-history.yml \
	-f orchestration/docker-compose.etl-runner.yml \
	-f orchestration/docker-compose.minio.yml 

# Nome do container do Airflow
AIRFLOW_CONTAINER=airflow
METABASE_CONTAINER=metabase
CLICKHOUSE_CONTAINER=clickhouse


SCRIPTS_DIR=./minIo/scripts

# Nome do container do Postgres usado pelo Metabase
POSTGRES_METABASE_CONTAINER=postgres_metabase
POSTGRES_METABASE_DB=metabase_db
POSTGRES_METABASE_USER=metabase
BACKUP_FILE=metabase/metabase_pg_backup.sql
# Arquivo de vari√°veis
ENV_FILE=.env

# üîç Verifica se o .env existe
check-env:
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "‚ö†Ô∏è  $(ENV_FILE) n√£o encontrado. Execute: cp .env.example .env"; \
		exit 1; \
	fi

# üîê Exibe a senha gerada do Airflow (modo standalone)
airflow-password: check-env
	@echo "üîê Buscando senha do Airflow..."
	@docker logs $(AIRFLOW_CONTAINER) 2>&1 | grep "Password for user" || echo "‚ö†Ô∏è  Container n√£o encontrado ou senha ainda n√£o gerada."


# üöÄ Sobe todos os servi√ßos com build
up: check-env
	@echo "üöÄ Subindo todos os containers..."
	docker-compose --env-file $(ENV_FILE) $(COMPOSE_FILES) up -d --build

# ‚¨áÔ∏è Derruba containers sem remover volumes
down:
	@echo "üì¶ Parando containers..."
	docker-compose --env-file $(ENV_FILE) $(COMPOSE_FILES) down

# üßº Derruba tudo e remove volumes
down-clean:
	@echo "üß® Removendo containers e volumes..."
	docker-compose --env-file $(ENV_FILE) $(COMPOSE_FILES) down -v

# üîÅ Derruba e sobe novamente
reset: down up

# üßæ Logs do Airflow
logs-airflow:
	@echo "üìÑ Acompanhando logs do Airflow..."
	docker logs -f $(AIRFLOW_CONTAINER)

# üßæ Logs do Airflow
logs-metabase:
	@echo "üìÑ Acompanhando logs do Airflow..."
	docker logs -f $(METABASE_CONTAINER)

logs-clickhouse:
	@echo "üìÑ Acompanhando logs do clickhouse..."
	docker logs -f $(CLICKHOUSE_CONTAINER)
# üß™ Teste (placeholder)

logs-minio-init:
	docker logs -f minio-init

test:
	@echo "‚úÖ Teste OK - ambiente configurado"

# üöÄ Setup completo
init: check-env up airflow-password
	@echo "‚úÖ Setup finalizado! Acesse: http://localhost:8080"

up-clickhouse:
	@echo "üöÄ Subindo ClickHouse..."
	docker-compose --env-file $(ENV_FILE) -f orchestration/docker-compose.clickhouse.yml up -d --build

up-airflow:
	@echo "üöÄ Subindo Airflow..."
	docker-compose --env-file $(ENV_FILE) -f orchestration/docker-compose.airflow.yml up -d --build

up-etl-runner:
	@echo "üöÄ Subindo ETL Runner..."
	docker-compose --env-file $(ENV_FILE) -f orchestration/docker-compose.etl-runner.yml up -d --build

up-metabase:
	@echo "üöÄ Subindo Metabase..."
	docker-compose --env-file $(ENV_FILE) -f orchestration/docker-compose.metabase.yml up -d --build

up-minio:
	@echo "üöÄ Subindo MiniIo..."
	docker-compose --env-file $(ENV_FILE) -f orchestration/docker-compose.minio.yml up -d --build

up-spark-history:
	@echo "üöÄ Subindo Spark History..."
	docker-compose --env-file $(ENV_FILE) -f orchestration/docker-compose.spark-history.yml up -d --build


# Faz backup do banco do Metabase
backup-metabase-db:
	@echo "üíæ Fazendo backup do banco do Metabase..."
	docker exec -t $(POSTGRES_METABASE_CONTAINER) pg_dump -U $(POSTGRES_METABASE_USER) $(POSTGRES_METABASE_DB) > $(BACKUP_FILE)

# Restaura o banco a partir do backup (apaga tudo antes!)
restore-metabase-db-clean:
	@echo "‚ôªÔ∏è Restaurando banco do Metabase (apagando tudo antes)..."
	docker exec -i $(POSTGRES_METABASE_CONTAINER) psql -U $(POSTGRES_METABASE_USER) -d $(POSTGRES_METABASE_DB) -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
	docker exec -i $(POSTGRES_METABASE_CONTAINER) psql -U $(POSTGRES_METABASE_USER) -d $(POSTGRES_METABASE_DB) < $(BACKUP_FILE)


# Limpa logs de execu√ß√£o do Spark
clean-spark-events:
	@if [ -d "minIo/staging/spark-events" ]; then \
		echo "üßπ Limpando spark-events..."; \
		rm -rf minIo/staging/spark-events/*; \
		echo "‚úÖ spark-events limpo."; \
	else \
		echo "‚ö†Ô∏è Diret√≥rio spark-events n√£o encontrado. Nenhuma a√ß√£o realizada."; \
	fi

# Limpa diret√≥rio de output dos dados processados

.PHONY: clean-all clean-old clean-prefix

# Caminho padr√£o para os scripts

minio-clean-all:
	@echo "üî¥ Limpando todos os arquivos dos buckets no MinIO..."
	@$(SCRIPTS_DIR)/clean_minio_all.sh
	@echo "‚úÖ Limpeza completa conclu√≠da."

minio-clean-old:
	@echo "üü† Limpando arquivos antigos dos buckets no MinIO..."
	@$(SCRIPTS_DIR)/clean_minio_old.sh
	@echo "‚úÖ Limpeza de arquivos antigos conclu√≠da."

minio-clean-prefix:
	@echo "üü° Limpando arquivos por prefixo no MinIO..."
	@$(SCRIPTS_DIR)/clean_minio_prefix.sh
	@echo "‚úÖ Limpeza seletiva conclu√≠da."